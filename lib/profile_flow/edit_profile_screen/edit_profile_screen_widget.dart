import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';

import '../../services/systemconfiguration_service.dart';
import 'edit_profile_screen_model.dart';

class EditProfileScreenWidget extends StatefulWidget {
  const EditProfileScreenWidget({super.key});

  @override
  State<EditProfileScreenWidget> createState() =>
      _EditProfileScreenWidgetState();
}

class _EditProfileScreenWidgetState extends State<EditProfileScreenWidget> {
  late EditProfileScreenModel _model;
  bool isEdited = false;
  String _tempSelectedValue = '';
  late int minAge = 13; // M·∫∑c ƒë·ªãnh minWeight
  late int maxAge = 100; // M·∫∑c ƒë·ªãnh maxWeight
  final SystemConfigurationService _systemConfigService =
      SystemConfigurationService();

  Future<void> _getConfigValuesFromApi() async {
    try {
      // L·∫•y min/max height t·ª´ API
      final responseHeight = await _systemConfigService.getSystemConfigById(1);
      final ageConfig = responseHeight['data'];
      minAge = ageConfig['minValue'] ?? 13;
      maxAge = ageConfig['maxValue'] ?? 100;

      // L·∫•y min/max weight t·ª´ API

      setState(() {}); // C·∫≠p nh·∫≠t UI sau khi l·∫•y d·ªØ li·ªáu
    } catch (e) {
      print("‚ùå L·ªói khi l·∫•y c·∫•u h√¨nh: $e");
    }
  }

  @override
  @override
  void initState() {
    super.initState();
    _model = EditProfileScreenModel();

    Future.delayed(Duration.zero, () async {
      await _model.fetchUserProfile();
      await _getConfigValuesFromApi();
      setState(() {}); // üöÄ C·∫≠p nh·∫≠t UI ngay sau khi fetch d·ªØ li·ªáu
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[100],
      body: SafeArea(
        child: Column(
          children: [
            _buildHeader(),
            _buildProfilePhoto(),
            _model.isLoading ? _buildLoadingIndicator() : _buildProfileForm(),
          ],
        ),
      ),
    );
  }

  /// üü¢ Header v·ªõi n√∫t back m∆∞·ª£t
  /// üü¢ Header v·ªõi n√∫t back t·ª´ MyProfileWidget
  Widget _buildHeader() {
    bool canUpdate = _model.name.isNotEmpty &&
        _model.location.isNotEmpty &&
        _model.gender.isNotEmpty &&
        _model.age.isNotEmpty;

    return Container(
      padding: EdgeInsets.symmetric(horizontal: 20, vertical: 16),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          InkWell(
            onTap: () {
              if (mounted) {
                Navigator.pop(context);
              }
            },
            child: Icon(Icons.arrow_back, size: 28),
          ),
          Flexible(
            child: Text(
              'Ch·ªânh s·ª≠a h·ªì s∆°',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
          ),
          InkWell(
            onTap: isEdited &&
                    canUpdate // ‚úÖ Only allow update if all fields are filled
                ? () async {
                    await _model.updateUserProfile();

                    setState(() {
                      isEdited = false;
                    });

                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text("C·∫≠p nh·∫≠t th√†nh c√¥ng!"),
                        duration: Duration(seconds: 2),
                      ),
                    );
                    Navigator.pop(context, true);
                  }
                : null, // ‚úÖ Disable button if fields are empty
            child: Icon(
              Icons.check,
              color: (isEdited && canUpdate)
                  ? Colors.green
                  : Colors.grey, // ‚úÖ Disable if not valid
              size: 28,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProfilePhoto() {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 10),
      child: Column(
        children: [
          CircleAvatar(
            radius: 40,
            backgroundColor: Colors.grey[300],
            backgroundImage: _model.avatar.isNotEmpty
                ? FileImage(File(
                    _model.avatar)) // S·ª≠ d·ª•ng FileImage thay v√¨ NetworkImage
                : null,
            child: _model.avatar.isEmpty
                ? Icon(Icons.person, size: 50, color: Colors.white)
                : null,
          ),
          TextButton(
            onPressed: () async {
              // S·ª≠ d·ª•ng ImagePicker ƒë·ªÉ ch·ªçn ·∫£nh
              final picker = ImagePicker();
              final pickedFile =
                  await picker.pickImage(source: ImageSource.gallery);

              if (pickedFile != null) {
                // C·∫≠p nh·∫≠t avatar v√† tr·∫°ng th√°i ƒë√£ thay ƒë·ªïi
                setState(() {
                  _model.avatar = pickedFile.path;
                  isEdited = true;
                });
              }
            },
            child: Text('Ch·ªçn ·∫£nh', style: TextStyle(color: Colors.green)),
          ),
        ],
      ),
    );
  }

  /// üü¢ Hi·ªÉn th·ªã Loading khi ch∆∞a t·∫£i d·ªØ li·ªáu
  Widget _buildLoadingIndicator() {
    return Expanded(child: Center(child: CircularProgressIndicator()));
  }

  /// üü¢ Form th√¥ng tin c√° nh√¢n
  /// üü¢ Form to display editable user details
  /// üü¢ Form th√¥ng tin c√° nh√¢n
  Widget _buildProfileForm() {
    return Expanded(
      child: ListView(
        padding: EdgeInsets.symmetric(horizontal: 20),
        children: [
          _buildEditableRow(
            'T√™n c·ªßa b·∫°n',
            _model.name,
            (val) {
              setState(() {
                _model.name = val;
                isEdited = true;
              });
            },
            _model.name.isEmpty
                ? "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
                : null, // ‚úÖ Show error
          ),
          _buildPickerRow(
            'Gi·ªõi t√≠nh',
            _model.gender,
            ['Nam', 'N·ªØ'],
            (val) {
              setState(() {
                _model.gender = val;
                isEdited = true;
              });
            },
          ),
          _buildPickerRow(
            'Tu·ªïi ',
            _model.age,
            _generateAgeList(),
            (val) {
              setState(() {
                _model.age = val;
                isEdited = true;
              });
            },
          ),
          _buildEditableRow(
            'ƒê·ªãa ch·ªâ',
            _model.location,
            (val) {
              setState(() {
                _model.location = val;
                isEdited = true;
              });
            },
            _model.location.isEmpty
                ? "ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
                : null, // ‚úÖ Show error
          ),
        ],
      ),
    );
  }

  Widget _buildEditableRow(String title, String value,
      Function(String) onChanged, String? errorText) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 10),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Flexible(
                child: Text(title,
                    style:
                        TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
              ),
              SizedBox(
                width: 150,
                child: TextFormField(
                  initialValue: value,
                  textAlign: TextAlign.end,
                  decoration: InputDecoration(
                    border: InputBorder.none,
                    errorText: errorText, // ‚úÖ Show error message
                  ),
                  onChanged: (val) {
                    if (val.trim().isEmpty) {
                      val = ""; // ‚úÖ Keep empty instead of defaulting
                    }
                    onChanged(val);
                  },
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// üü¢ √î ch·ªçn d·ªØ li·ªáu b·∫±ng Bottom Picker
  Widget _buildPickerRow(String title, String value, List<String> options,
      Function(String) onSelected) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 10),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(title,
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
          InkWell(
            onTap: () =>
                _showCupertinoPicker(title, options, value, onSelected),
            child: Row(
              children: [
                Text(value, style: TextStyle(fontSize: 16)),
                SizedBox(width: 8),
                Icon(Icons.arrow_forward_ios, size: 16, color: Colors.grey),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// üü¢ Hi·ªÉn th·ªã Bottom Picker (Ch·ªâ thay ƒë·ªïi khi nh·∫•n "DONE")
  void _showCupertinoPicker(String title, List<String> options,
      String currentValue, Function(String) onSelected) {
    int selectedIndex = options.indexOf(currentValue);
    _tempSelectedValue = currentValue;

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.4,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            SizedBox(height: 16),
            Text(title,
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            Expanded(
              child: CupertinoPicker(
                scrollController:
                    FixedExtentScrollController(initialItem: selectedIndex),
                itemExtent: 40,
                onSelectedItemChanged: (index) {
                  _tempSelectedValue = options[index];
                },
                children: options
                    .map((e) =>
                        Center(child: Text(e, style: TextStyle(fontSize: 16))))
                    .toList(),
              ),
            ),
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
              child: ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  minimumSize: Size(double.infinity, 50),
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                onPressed: () {
                  onSelected(_tempSelectedValue);
                  setState(() {
                    isEdited = true;
                  });
                  Navigator.pop(context);
                },
                child: Text("DONE",
                    style: TextStyle(color: Colors.white, fontSize: 18)),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// üü¢ T·∫°o danh s√°ch tu·ªïi t·ª´ 10 ƒë·∫øn 100
  List<String> _generateAgeList() {
    return List.generate((maxAge - minAge + 1), (index) => '${minAge + index}');
  }
}
