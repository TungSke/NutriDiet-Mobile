import 'package:flutter/material.dart';

import '/flutter_flow/flutter_flow_util.dart';
import '../../services/health_service.dart';
import '../../services/user_service.dart';
import 'my_profile_widget.dart';

class MyProfileModel extends FlutterFlowModel<MyProfileWidget>
    with ChangeNotifier {
  final UserService _userService = UserService();

  String name = '';
  String age = '';
  String phoneNumber = '';
  String gender = '';
  String location = '';
  String email = '';
  String height = '';
  String weight = '';
  String activityLevel = '';
  String dietStyle = '';
  String userId = '';
  String avatar = '';
  List<String> allergies = []; // ‚úÖ D·ªã ·ª©ng
  List<String> diseases = []; // ‚úÖ B·ªánh n·ªÅn
  String goalType = ''; // ‚úÖ M·ª•c ti√™u s·ª©c kh·ªèe
  double targetWeight = 0.0; // ‚úÖ C√¢n n·∫∑ng m·ª•c ti√™u
  String weightChangeRate = '';
  int dailyCalories = 0;
  double dailyCarb = 0.0;
  double dailyFat = 0.0;
  double dailyProtein = 0.0;
  int progressPercentage = 0;
  final Map<String, String> _goalTypeMap = {
    'LoseWeight': 'Gi·∫£m c√¢n',
    'Maintain': 'Gi·ªØ c√¢n',
    'GainWeight': 'TƒÉng c√¢n',
  };
  final Map<String, String> _genderMap = {
    'Nam': 'Male',
    'N·ªØ': 'Female',
  };

  // M·∫£ng √°nh x·∫° gi√° tr·ªã s·ªë v·ªÅ gi√° tr·ªã m√¥ t·∫£
  final Map<String, String> _reverseGenderMap = {
    'Male': 'Nam',
    'Female': 'N·ªØ',
  };
  final Map<String, String> _activityLevelMap = {
    'Sedentary': '√çt v·∫≠n ƒë·ªông',
    'LightlyActive': 'V·∫≠n ƒë·ªông nh·∫π',
    'ModeratelyActive': 'V·∫≠n ƒë·ªông v·ª´a ph·∫£i',
    'VeryActive': 'v·∫≠n ƒë·ªông nhi·ªÅu',
    'ExtraActive': 'C∆∞·ªùng ƒë·ªô r·∫•t cao',
  };
  final Map<String, String> _dietStyleMap = {
    'HighCarbLowProtein': 'Nhi·ªÅu Carb, gi·∫£m Protein',
    'HighProteinLowCarb': 'Nhi·ªÅu Protein, gi·∫£m Carb',
    'Vegetarian': 'ƒÇn chay',
    'Vegan': 'Thu·∫ßn chay',
    'Balanced': 'C√¢n b·∫±ng',
  };

  final Map<int, String> _weightChangeRateMap = {
    0: 'Gi·ªØ c√¢n',
    250: 'TƒÉng 0.25kg/1 tu·∫ßn',
    500: 'TƒÉng 0.5kg/1 tu·∫ßn',
    -250: 'Gi·∫£m 0.25Kg/1 tu·∫ßn',
    -500: 'Gi·∫£m 0.5Kg/1 tu·∫ßn',
    -750: 'Gi·∫£m 0.75Kg/1 tu·∫ßn',
    -1000: 'Gi·∫£m 1Kg/1 tu·∫ßn',
  };

  @override
  void initState(BuildContext context) {
    fetchUserProfile();
    fetchHealthProfile();
  }

  Future<void> fetchUserProfile() async {
    try {
      print("üîÑ ƒêang g·ªçi API c·∫≠p nh·∫≠t profile...");
      final response = await _userService.whoAmI();
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        name = data['name'] ?? "Ch∆∞a c·∫≠p nh·∫≠t";
        age = data['age']?.toString() ?? "0";
        phoneNumber = data['phoneNumber'] ?? "Ch∆∞a c·∫≠p nh·∫≠t";
        gender = _reverseGenderMap[data['gender']] ?? "Ch∆∞a c·∫≠p nh·∫≠t";
        location = data['address'] ?? "Ch∆∞a c·∫≠p nh·∫≠t";
        email = data["email"] ?? "Ch∆∞a c·∫≠p nh·∫≠t";
        userId = data['id']?.toString() ?? "";
        avatar = data["avatar"] ?? "Ch∆∞a c·∫≠p nh·∫≠t";
        notifyListeners();
      } else {
        debugPrint('‚ùå Failed to fetch user profile');
      }
    } catch (e) {
      debugPrint("‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: $e");
    }
  }

  Future<void> fetchHealthProfile() async {
    try {
      print("üîÑ ƒêang l·∫•y th√¥ng tin s·ª©c kh·ªèe t·ª´ API...");
      final healthData = await HealthService.fetchHealthData();

      if (healthData["healthData"] != null) {
        final data = healthData["healthData"];

        height = data["height"]?.toString() ?? "N/A";
        weight = data["weight"]?.toString() ?? "N/A";
        activityLevel = _activityLevelMap[data["activityLevel"]] ?? "N/A";
        dietStyle = _dietStyleMap[data["dietStyle"]] ?? "N/A";
        // L·∫•y danh s√°ch d·ªã ·ª©ng
        allergies = data["allergies"] != null
            ? (data["allergies"] as List)
                .map((allergy) => allergy["allergyName"].toString())
                .toList()
            : [];

        // L·∫•y danh s√°ch b·ªánh n·ªÅn
        diseases = data["diseases"] != null
            ? (data["diseases"] as List)
                .map((diseases) => diseases["diseaseName"].toString())
                .toList()
            : [];

        // N·∫øu c√≥ d·ªØ li·ªáu m·ª•c ti√™u c√° nh√¢n
        if (healthData["personalGoal"] != null) {
          final personalGoal = healthData["personalGoal"];
          goalType =
              _goalTypeMap[personalGoal["goalType"]] ?? "Ch∆∞a ƒë·∫∑t m·ª•c ti√™u";
          // targetWeight = personalGoal["targetWeight"]?.toString() ?? "N/A";
          targetWeight = personalGoal["targetWeight"] != null
              ? double.parse(personalGoal['targetWeight'].toString())
              : 0.0;
          progressPercentage = personalGoal["progressPercentage"] ?? 0;
          dailyCalories = personalGoal["dailyCalories"] ?? "";
          dailyCarb = personalGoal["dailyCarb"] != null
              ? double.parse(personalGoal['dailyCarb'].toString())
              : 0.0;
          dailyFat = personalGoal["dailyFat"] != null
              ? double.parse(personalGoal['dailyFat'].toString())
              : 0.0;
          dailyProtein = personalGoal["dailyProtein"] != null
              ? double.parse(personalGoal['dailyProtein'].toString())
              : 0.0;
          weightChangeRate =
              _weightChangeRateMap[personalGoal["weightChangeRate"]] ??
                  "Ch∆∞a c·∫≠p nh·∫≠t";
        }

        notifyListeners();
      } else {
        print("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu s·ª©c kh·ªèe: ${healthData["errorMessage"]}");
      }
    } catch (e) {
      print("‚ùå L·ªói khi fetch d·ªØ li·ªáu s·ª©c kh·ªèe: $e");
    }
  }

  @override
  void dispose() {}
}
