import 'dart:convert';

import 'package:diet_plan_app/services/api_service.dart';
import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;

class PackageService {
  final ApiService _apiService = ApiService();
  final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();

  Future<http.Response> BuyPremiumPackage({
    required String packageId,
    required BuildContext context, // Th√™m BuildContext v√†o tham s·ªë
  }) async {
    final String? token = await flutterSecureStorage.read(key: 'accessToken');

    if (token == null || token.isEmpty) {
      print("‚ùå Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      // Hi·ªÉn th·ªã snackbar khi token kh√¥ng h·ª£p l·ªá
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."),
          duration: Duration(seconds: 3),
        ),
      );
      return http.Response('', 400); // Tr·∫£ v·ªÅ HTTP response l·ªói
    }

    try {
      // S·ª≠ d·ª•ng http.post thay v√¨ http.MultipartRequest
      final response = await http.post(
        Uri.parse(
            "${_apiService.baseUrl}/api/user/upgrade-package/${packageId}"),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type':
              'application/json', // Ch·ªâ c·∫ßn Content-Type l√† application/json
        },
        body: jsonEncode({
          'packageId': packageId,
        }),
      );

      print("üîπ Response status: ${response.statusCode}");
      print("üîπ Response body: ${response.body}");

      if (response.statusCode == 200 || response.statusCode == 204) {
        // Hi·ªÉn th·ªã SnackBar th√¥ng b√°o th√†nh c√¥ng
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Thanh to√°n th√†nh c√¥ng!"),
            backgroundColor: Colors.green, // M√†u xanh cho th√†nh c√¥ng
            duration: Duration(seconds: 3),
          ),
        );
        return response;
      } else {
        // X·ª≠ l√Ω l·ªói khi m√£ l·ªói kh√¥ng ph·∫£i l√† 200 ho·∫∑c 204
        final responseBody = jsonDecode(response.body);
        String errorMessage = responseBody["message"] ?? "Thanh to√°n th·∫•t b·∫°i.";
        print("‚ùå L·ªói khi thanh to√°n: $errorMessage");

        // Hi·ªÉn th·ªã SnackBar v·ªõi th√¥ng b√°o l·ªói t·ª´ API
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(errorMessage, style: TextStyle(color: Colors.white)),
            backgroundColor: Colors.red, // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói t·ª´ API
            duration: Duration(seconds: 3),
          ),
        );

        return response; // Tr·∫£ v·ªÅ HTTP response l·ªói m√† kh√¥ng c·∫ßn n√©m l·ªói
      }
    } catch (e) {
      // In ra l·ªói chi ti·∫øt n·∫øu c√≥
      print("‚ùå L·ªói khi thanh to√°n: $e");

      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ l·ªói t·ª´ API
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i."),
          duration: Duration(seconds: 3),
        ),
      );

      return http.Response(
          "Kh√¥ng th·ªÉ thanh to√°n.", 500); // Tr·∫£ v·ªÅ HTTP response l·ªói
    }
  }

  Future<dynamic> fetchPackagePayment({
    String packageId = "1",
    String cancelUrl = "http://localhost:52060/checkoutFailScreen",
    String returnUrl = "http://localhost:52060/checkoutSuccessScreen",
  }) async {
    final String? token = await flutterSecureStorage.read(key: 'accessToken');

    if (token == null || token.isEmpty) {
      throw Exception("Access token kh√¥ng h·ª£p l·ªá");
    }

    final Uri url = Uri.parse(
      "${_apiService.baseUrl}/api/package/payment?cancelUrl=${Uri.encodeComponent(cancelUrl)}&returnUrl=${Uri.encodeComponent(returnUrl)}&packageId=$packageId",
    );

    final response = await http.post(
      url,
      headers: {
        'Authorization': 'Bearer $token',
        'accept': '*/*',
      },
      body: '',
    );

    if (response.statusCode == 200 || response.statusCode == 204) {
      return response.body.isNotEmpty ? jsonDecode(response.body) : null;
    } else {
      throw Exception("L·ªói API: ${response.statusCode} - ${response.body}");
    }
  }
}
