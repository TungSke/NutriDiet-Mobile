import 'dart:convert';

import 'package:diet_plan_app/services/api_service.dart';
import 'package:flutter/material.dart';
import 'package:flutter_facebook_auth/flutter_facebook_auth.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:http/http.dart' as http;
import 'package:http_parser/http_parser.dart';

class UserService {
  final ApiService _apiService = ApiService();

  Future<http.Response> register(String email, String password) async {
    final response = await _apiService.post(
      "api/user/register",
      body: {'email': email, 'password': password},
    );
    return response;
  }

  Future<http.Response> verifyAccount(String email, String otp) async {
    final response = await _apiService.post(
      "api/user/verify-account",
      body: {'email': email, 'otp': otp},
    );
    return response;
  }

  Future<http.Response> resendOTP(String email) async {
    final response = await _apiService.post(
      "api/user/resend-otp",
      body: {'email': email},
    );
    return response;
  }

  Future<http.Response> loginWithFacebook(String? fcmToken) async {
    final LoginResult result = await FacebookAuth.instance
        .login(); // by default we request the email and the public profile

    final AccessToken accessToken = result.accessToken!;
    final response = await _apiService.post(
        "api/user/login-with-facebook?idToken=${accessToken.tokenString}&fcmToken=$fcmToken",
        body: {});
    return response;
  }

  Future<http.Response> login(
      String email, String password, String? fcmToken) async {
    final response = await _apiService.post(
      "api/user/login",
      body: {'email': email, 'password': password, 'fcmToken': fcmToken},
    );
    debugPrint("fcmToken: ${fcmToken}");
    return response;
  }

  Future<http.Response> loginWithGoogle(String? fcmToken) async {
    try {
      final GoogleSignIn googleSignIn = GoogleSignIn(
        scopes: ['email'],
      );

      await googleSignIn.signOut();
      final GoogleSignInAccount? signInAccount = await googleSignIn.signIn();
      if (signInAccount == null) {
        throw Exception("ƒêƒÉng nh·∫≠p Google ƒë√£ b·ªã h·ªßy");
      }
      final GoogleSignInAuthentication googleAuth =
          await signInAccount.authentication;
      final response = await _apiService.post(
          "api/user/login-with-google?idToken=${googleAuth.idToken}&fcmToken=$fcmToken",
          body: {});

      //print("response: ${response.body}");
      return response;
    } catch (e) {
      throw Exception("Google login failed: $e");
    }
  }

  Future<http.Response> whoAmI() async {
    final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();

    final String? token = await flutterSecureStorage.read(key: 'accessToken');
    if (token == null || token.isEmpty) {
      throw Exception("Access token not found.");
    }
    final response = await _apiService.get("api/user/whoami", token: token);
    return response;
  }

  // Future<http.Response> updateUser({
  //   required String fullName,
  //   required int age,
  //   required String gender,
  //   required String location,
  // }) async {
  //   final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();
  //   final String? token = await flutterSecureStorage.read(key: 'accessToken');
  //
  //   if (token == null || token.isEmpty) {
  //     throw Exception("Access token not found.");
  //   }
  //
  //   final Map<String, dynamic> body = {
  //     "fullName": fullName,
  //     "age": age,
  //     "gender": gender,
  //     "location": location,
  //   };
  //   print("Request body: ${jsonEncode(body)}");
  //
  //   final response = await _apiService.put(
  //     "/api/user",
  //     token: token,
  //     body: body,
  //   );
  //
  //   return response;
  // }
  Future<http.Response> updateUser({
    required String fullName,
    required int age,
    required String gender,
    required String location,
    required String avatar, // S·ª≠a: avatar gi·ªù s·∫Ω l√† ƒë∆∞·ªùng d·∫´n file
  }) async {
    final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();
    final String? token = await flutterSecureStorage.read(key: 'accessToken');

    if (token == null || token.isEmpty) {
      throw Exception("‚ö†Ô∏è Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
    }

    try {
      var request = http.MultipartRequest(
        'PUT',
        Uri.parse("${_apiService.baseUrl}/api/user"),
      );

      request.headers['Authorization'] = 'Bearer $token';

      // ‚úÖ Th√™m c√°c d·ªØ li·ªáu v√†o Form-Data
      request.fields['FullName'] = fullName;
      request.fields['Age'] = age.toString();
      request.fields['Gender'] = gender;
      request.fields['Location'] = location;

      // ‚úÖ N·∫øu c√≥ avatar, g·ª≠i n√≥ d∆∞·ªõi d·∫°ng file
      if (avatar.isNotEmpty) {
        var avatarFile = await http.MultipartFile.fromPath(
          'Avatar',
          avatar, // ƒê√¢y l√† ƒë∆∞·ªùng d·∫´n ƒë·∫øn file
          contentType: MediaType('image',
              'png'), // N·∫øu l√† ·∫£nh PNG, b·∫°n c√≥ th·ªÉ thay ƒë·ªïi theo lo·∫°i ·∫£nh b·∫°n c√≥
        );
        request.files.add(avatarFile); // Th√™m avatar v√†o request
      }

      print("üîπ Sending update user request: ${jsonEncode(request.fields)}");

      final response = await request.send();
      final httpResponse = await http.Response.fromStream(response);

      print("üîπ Response status: ${httpResponse.statusCode}");
      print("üîπ Response body: ${httpResponse.body}");

      if (httpResponse.statusCode == 200 || httpResponse.statusCode == 204) {
        return httpResponse;
      } else {
        throw Exception(
            "C·∫≠p nh·∫≠t m·ª•c ti√™u c√° nh√¢n th·∫•t b·∫°i: ${httpResponse.body}");
      }
    } catch (e) {
      print("‚ùå L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng: $e");
      throw Exception("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng.");
    }
  }

  Future<http.Response> getHealthProfileReport() async {
    final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();
    final String? token = await flutterSecureStorage.read(key: 'accessToken');

    if (token == null || token.isEmpty) {
      throw Exception("‚ö†Ô∏è Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
    }

    try {
      final response = await _apiService
          .get("api/health-profile/reports?field=Weight", token: token);

      if (response.statusCode == 200) {
        return response;
      } else {
        print('L·ªói l·∫•y health profile report: ${response.body}');
        throw Exception(
            'L·ªói l·∫•y health profile report: ${response.statusCode}');
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi API: $e');
      throw Exception("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server.");
    }
  }

  Future<http.Response> getHealthProfile() async {
    final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();
    final String? token = await flutterSecureStorage.read(key: 'accessToken');

    if (token == null || token.isEmpty) {
      throw Exception("‚ö†Ô∏è Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
    }

    try {
      final response =
          await _apiService.get("/api/health-profile", token: token);

      if (response.statusCode == 200) {
        return response;
      } else {
        print('L·ªói l·∫•y health profile: ${response.body}');
        throw Exception('L·ªói l·∫•y health profile: ${response.statusCode}');
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi API: $e');
      throw Exception("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server.");
    }
  }

  Future<http.Response> updateHealthProfile({
    double? height, // Use double instead of int
    double? weight, // Use double instead of int
    String? activityLevel,
    String? aisuggestion,
    String? dietStyle,
    List<dynamic>? allergies,
    List<dynamic>? diseases,
  }) async {
    final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();
    final String? token = await flutterSecureStorage.read(key: 'accessToken');

    if (token == null || token.isEmpty) {
      throw Exception("‚ö†Ô∏è Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
    }

    try {
      // If any value is null, fetch data from health-profile
      if ([
        height,
        weight,
        activityLevel,
        dietStyle,
        aisuggestion,
        allergies,
        diseases
      ].any((e) => e == null)) {
        final healthProfileResponse = await getHealthProfile();
        if (healthProfileResponse.statusCode == 200) {
          final Map<String, dynamic> healthProfile =
              jsonDecode(healthProfileResponse.body);

          height ??= double.tryParse(healthProfile['height']?.toString() ?? '');
          weight ??= double.tryParse(healthProfile['weight']?.toString() ?? '');
          activityLevel ??= healthProfile['activityLevel']?.toString();
          aisuggestion ??= healthProfile['aisuggestion']?.toString();
          dietStyle ??= healthProfile['dietStyle']?.toString();
          allergies ??= (healthProfile['allergies'] as List?)
                  ?.map((e) => int.tryParse(e['allergyId'].toString()) ?? 0)
                  .where((e) => e > 0)
                  .toList() ??
              [];

          diseases ??= (healthProfile['diseases'] as List?)
                  ?.map((e) => int.tryParse(e['diseaseId'].toString()) ?? 0)
                  .where((e) => e > 0)
                  .toList() ??
              [];
        }
      }

      // Create the update request
      var request = http.MultipartRequest(
        'POST',
        Uri.parse("${_apiService.baseUrl}/api/health-profile"),
      );

      request.headers['Authorization'] = 'Bearer $token';

      // Add fields if not null
      if (height != null) request.fields['Height'] = height.toString();
      if (weight != null) request.fields['Weight'] = weight.toString();
      if (activityLevel != null)
        request.fields['ActivityLevel'] = activityLevel;
      if (dietStyle != null) request.fields['DietStyle'] = dietStyle;
      if (aisuggestion != null) request.fields['Aisuggestion'] = aisuggestion;

      // Add allergies and diseases if not empty
      if (allergies != null && allergies.isNotEmpty) {
        for (int i = 0; i < allergies.length; i++) {
          request.fields['AllergyIds[$i]'] = allergies[i].toString();
        }
      }

      if (diseases != null && diseases.isNotEmpty) {
        for (int i = 0; i < diseases.length; i++) {
          request.fields['DiseaseIds[$i]'] = diseases[i].toString();
        }
      }

      // Debug log before sending request
      print("üîπ Request updateHealthProfile: ${jsonEncode(request.fields)}");

      final response = await request.send();
      final httpResponse = await http.Response.fromStream(response);

      print("üîπ Response status: ${httpResponse.statusCode}");
      print("üîπ Response body: ${httpResponse.body}");

      if (httpResponse.statusCode != 200) {
        throw Exception("C·∫≠p nh·∫≠t h·ªì s∆° th·∫•t b·∫°i: ${httpResponse.body}");
      }

      return httpResponse;
    } catch (e) {
      print("‚ùå L·ªói khi c·∫≠p nh·∫≠t h·ªì s∆° s·ª©c kh·ªèe: $e");
      throw Exception("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t h·ªì s∆° s·ª©c kh·ªèe.");
    }
  }

  Future<http.Response> createPersonalGoal({
    required String goalType,
    required double targetWeight,
    required String weightChangeRate,
    String goalDescription = "M·ª•c ti√™u m·∫∑c ƒë·ªãnh",
    String notes = "Kh√¥ng c√≥ ghi ch√∫",
  }) async {
    final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();
    final String? token = await flutterSecureStorage.read(key: 'accessToken');

    if (token == null || token.isEmpty) {
      throw Exception("‚ö†Ô∏è Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
    }

    try {
      var request = http.MultipartRequest(
        'POST', // ‚úÖ Chuy·ªÉn t·ª´ POST sang PUT

        Uri.parse("${_apiService.baseUrl}/api/personal-goal"),
      );

      request.headers['Authorization'] = 'Bearer $token';

      // ‚úÖ Th√™m d·ªØ li·ªáu v√†o Form-Data
      request.fields['GoalType'] = goalType;
      request.fields['TargetWeight'] = targetWeight.toString();
      request.fields['WeightChangeRate'] = weightChangeRate;

      // ‚úÖ Ki·ªÉm tra v√† g·ª≠i `GoalDescription` v√† `Notes`
      if (goalDescription.isNotEmpty) {
        request.fields['GoalDescription'] = goalDescription;
      } else {
        request.fields['GoalDescription'] = "M·ª•c ti√™u m·∫∑c ƒë·ªãnh";
      }

      if (notes.isNotEmpty) {
        request.fields['Notes'] = notes;
      } else {
        request.fields['Notes'] = "Kh√¥ng c√≥ ghi ch√∫";
      }

      print(
          "üîπ Sending updatePersonalGoal request: ${jsonEncode(request.fields)}");

      final response = await request.send();
      final httpResponse = await http.Response.fromStream(response);

      print("üîπ Response status: ${httpResponse.statusCode}");
      print("üîπ Response body: ${httpResponse.body}");

      if (httpResponse.statusCode == 201 || httpResponse.statusCode == 204) {
        return httpResponse;
      } else {
        throw Exception(
            "C·∫≠p nh·∫≠t m·ª•c ti√™u c√° nh√¢n th·∫•t b·∫°i: ${httpResponse.body}");
      }
    } catch (e) {
      print("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·ª•c ti√™u c√° nh√¢n: $e");
      throw Exception("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·ª•c ti√™u c√° nh√¢n.");
    }
  }

  // C·∫≠p nh·∫≠t m·ª•c ti√™u c√° nh√¢n
  Future<http.Response> updatePersonalGoal({
    required String goalType,
    required double targetWeight, // S·ª≠ d·ª•ng double thay v√¨ int
    required String weightChangeRate,
    String goalDescription = "M·ª•c ti√™u m·∫∑c ƒë·ªãnh",
    String notes = "Kh√¥ng c√≥ ghi ch√∫",
    required BuildContext context, // Th√™m context v√†o tham s·ªë
  }) async {
    final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();
    final String? token = await flutterSecureStorage.read(key: 'accessToken');

    if (token == null || token.isEmpty) {
      print("‚ùå Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      // Hi·ªÉn th·ªã snackbar khi token kh√¥ng h·ª£p l·ªá, v√† kh√¥ng c·∫ßn n√©m l·ªói n·ªØa
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."),
          duration: Duration(seconds: 3),
        ),
      );
      return http.Response('', 400); // Tr·∫£ v·ªÅ HTTP response l·ªói
    }

    try {
      var request = http.MultipartRequest(
        'PUT', // S·ª≠ d·ª•ng PUT ƒë·ªÉ c·∫≠p nh·∫≠t
        Uri.parse("${_apiService.baseUrl}/api/personal-goal"),
      );

      request.headers['Authorization'] = 'Bearer $token';

      // Th√™m d·ªØ li·ªáu v√†o Form-Data
      request.fields['GoalType'] = goalType;
      request.fields['TargetWeight'] =
          targetWeight.toString(); // Chuy·ªÉn double th√†nh String
      request.fields['WeightChangeRate'] = weightChangeRate;

      // Ki·ªÉm tra v√† g·ª≠i `GoalDescription` v√† `Notes`
      request.fields['GoalDescription'] =
          goalDescription.isNotEmpty ? goalDescription : "M·ª•c ti√™u m·∫∑c ƒë·ªãnh";
      request.fields['Notes'] = notes.isNotEmpty ? notes : "Kh√¥ng c√≥ ghi ch√∫";

      print(
          "üîπ Sending updatePersonalGoal request: ${jsonEncode(request.fields)}");

      final response = await request.send();
      final httpResponse = await http.Response.fromStream(response);

      print("üîπ Response status: ${httpResponse.statusCode}");
      print("üîπ Response body: ${httpResponse.body}");

      // Ki·ªÉm tra tr·∫°ng th√°i m√£ ph·∫£n h·ªìi
      if (httpResponse.statusCode == 200 || httpResponse.statusCode == 204) {
        // Hi·ªÉn th·ªã SnackBar th√¥ng b√°o th√†nh c√¥ng
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content:
                Text("C·∫≠p nh·∫≠t th√†nh c√¥ng!"), // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            backgroundColor: Colors.green, // M√†u xanh cho th√†nh c√¥ng
            duration: Duration(seconds: 3),
          ),
        );
        return httpResponse;
      } else {
        // X·ª≠ l√Ω l·ªói khi m√£ l·ªói kh√¥ng ph·∫£i l√† 200 ho·∫∑c 204
        final responseBody = jsonDecode(httpResponse.body);
        String errorMessage = responseBody["message"] ?? "C·∫≠p nh·∫≠t th·∫•t b·∫°i.";
        print("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·ª•c ti√™u c√° nh√¢n: $errorMessage");

        // Hi·ªÉn th·ªã Snackbar v·ªõi th√¥ng b√°o l·ªói t·ª´ API
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              errorMessage,
              style: TextStyle(color: Colors.white),
            ),
            backgroundColor: Colors.red, // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói t·ª´ API
            duration: Duration(seconds: 3),
          ),
        );

        return httpResponse; // Tr·∫£ v·ªÅ HTTP response l·ªói m√† kh√¥ng c·∫ßn n√©m l·ªói
      }
    } catch (e) {
      // In ra l·ªói chi ti·∫øt n·∫øu c√≥
      print("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·ª•c ti√™u c√° nh√¢n: $e");

      // Ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o l·ªói m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ l·ªói t·ª´ API
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i."), // Th√¥ng b√°o l·ªói m·∫∑c ƒë·ªãnh
          duration: Duration(seconds: 3),
        ),
      );

      return http.Response("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·ª•c ti√™u c√° nh√¢n.",
          500); // Tr·∫£ v·ªÅ HTTP response l·ªói
    }
  }

  Future<http.Response> getPersonalGoal() async {
    final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();
    final String? token = await flutterSecureStorage.read(key: 'accessToken');

    if (token == null || token.isEmpty) {
      throw Exception("‚ö† Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
    }

    try {
      final response = await _apiService.get("api/personal-goal", token: token);

      if (response.statusCode == 200) {
        return response;
      } else {
        print('L·ªói l·∫•y personal-goal: ${response.body}');
        throw Exception('L·ªói l·∫•y health profile: ${response.statusCode}');
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi API: $e');
      throw Exception("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server.");
    }
  }

  Future<http.Response> updateDailyMacronutrients({
    required double dailyCarb,
    required double dailyFat,
    required double dailyProtein,
    required BuildContext context, // Th√™m context v√†o tham s·ªë
  }) async {
    final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();
    final String? token = await flutterSecureStorage.read(key: 'accessToken');

    if (token == null || token.isEmpty) {
      print("‚ùå Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      // Hi·ªÉn th·ªã snackbar khi token kh√¥ng h·ª£p l·ªá, v√† kh√¥ng c·∫ßn n√©m l·ªói n·ªØa
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."),
          duration: Duration(seconds: 3),
        ),
      );
      return http.Response('', 400); // Tr·∫£ v·ªÅ HTTP response l·ªói
    }

    try {
      var request = http.MultipartRequest(
        'PUT', // S·ª≠ d·ª•ng PUT ƒë·ªÉ c·∫≠p nh·∫≠t
        Uri.parse(
            "${_apiService.baseUrl}/api/personal-goal/daily-macronutrients"),
      );

      request.headers['Authorization'] = 'Bearer $token';

      // Th√™m d·ªØ li·ªáu v√†o Form-Data
      request.fields['DailyCarb'] = dailyCarb.toString();
      request.fields['DailyFat'] =
          dailyFat.toString(); // Chuy·ªÉn double th√†nh String
      request.fields['DailyProtein'] = dailyProtein.toString();

      print(
          "üîπ Sending updateDailyMacronutrients request: ${jsonEncode(request.fields)}");

      final response = await request.send();
      final httpResponse = await http.Response.fromStream(response);

      print("üîπ Response status: ${httpResponse.statusCode}");
      print("üîπ Response body: ${httpResponse.body}");

      // Ki·ªÉm tra tr·∫°ng th√°i m√£ ph·∫£n h·ªìi
      if (httpResponse.statusCode == 200 || httpResponse.statusCode == 204) {
        // Hi·ªÉn th·ªã SnackBar th√¥ng b√°o th√†nh c√¥ng
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content:
                Text("C·∫≠p nh·∫≠t th√†nh c√¥ng!"), // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            backgroundColor: Colors.green, // M√†u xanh cho th√†nh c√¥ng
            duration: Duration(seconds: 3),
          ),
        );
        return httpResponse;
      } else {
        // X·ª≠ l√Ω l·ªói khi m√£ l·ªói kh√¥ng ph·∫£i l√† 200 ho·∫∑c 204
        final responseBody = jsonDecode(httpResponse.body);
        String errorMessage = responseBody["message"] ?? "C·∫≠p nh·∫≠t th·∫•t b·∫°i.";
        print("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·ª•c ti√™u c√° nh√¢n: $errorMessage");

        // Hi·ªÉn th·ªã Snackbar v·ªõi th√¥ng b√°o l·ªói t·ª´ API
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              errorMessage,
              style: TextStyle(color: Colors.white),
            ),
            backgroundColor: Colors.red, // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói t·ª´ API
            duration: Duration(seconds: 3),
          ),
        );

        return httpResponse; // Tr·∫£ v·ªÅ HTTP response l·ªói m√† kh√¥ng c·∫ßn n√©m l·ªói
      }
    } catch (e) {
      // In ra l·ªói chi ti·∫øt n·∫øu c√≥
      print("‚ùå L·ªói khi c·∫≠p nh·∫≠t dinh d∆∞·ª°ng: $e");

      // Ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o l·ªói m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ l·ªói t·ª´ API
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i."), // Th√¥ng b√°o l·ªói m·∫∑c ƒë·ªãnh
          duration: Duration(seconds: 3),
        ),
      );

      return http.Response(
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t dinh d∆∞·ª°ng", 500); // Tr·∫£ v·ªÅ HTTP response l·ªói
    }
  }

  Future<http.Response> createAiSuggestion(String token) async {
    try {
      final response = await http.post(
        Uri.parse("${_apiService.baseUrl}/api/health-profile/ai-suggestion"),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );
      return response;
    } catch (e) {
      throw Exception("L·ªói khi g·ªçi API: $e");
    }
  }

  Future<bool> isPremium() async {
    try {
      final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();
      final String? accessToken =
          await flutterSecureStorage.read(key: 'accessToken');

      if (accessToken == null) {
        throw Exception("No access token available");
      }
      final response =
          await _apiService.get("api/user/is-premium", token: accessToken);
      if (response.statusCode == 200) {
        final Map<String, dynamic> responseData = jsonDecode(response.body);
        bool isPremium = responseData['data'] as bool;
        return isPremium;
      } else if (response.statusCode == 401) {
        throw Exception("Unauthorized: Please log in again.");
      } else {
        throw Exception(
            "Failed to check premium status: ${response.statusCode}");
      }
    } catch (e) {
      print("Error: $e");
      return false;
    }
  }
}
