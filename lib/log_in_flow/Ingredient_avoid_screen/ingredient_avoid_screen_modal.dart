import 'package:diet_plan_app/log_in_flow/Ingredient_avoid_screen/ingredient_avoid_screen_widget.dart';
import 'package:flutter/material.dart';

import '../../components/appbar_model.dart';
import '../../flutter_flow/flutter_flow_model.dart';
import '../../services/health_service.dart';
import '../../services/user_service.dart';

class IngredientAvoidScreenModel
    extends FlutterFlowModel<IngredientAvoidScreenWidget> with ChangeNotifier {
  ///  Local state fields for this page.
  List<String> allergies = []; // ‚úÖ D·ªã ·ª©ng
  List<String> diseases = [];
  final UserService _userService = UserService();
  String aisuggestion = '';

  ///  State fields for stateful widgets in this page.
  late AppbarModel appbarModel;

  @override
  void initState(BuildContext context) {}

  Future<void> fetchHealthProfile() async {
    try {
      print("üîÑ ƒêang l·∫•y th√¥ng tin s·ª©c kh·ªèe t·ª´ API...");
      final healthData = await HealthService.fetchHealthData();

      if (healthData["healthData"] != null) {
        final data = healthData["healthData"];
        // L·∫•y danh s√°ch d·ªã ·ª©ng
        allergies = data["allergies"] != null
            ? (data["allergies"] as List).map((allergy) {
                // L·∫•y t√™n d·ªã ·ª©ng
                String allergyName = allergy["allergyName"].toString();

                // L·∫•y danh s√°ch c√°c th√†nh ph·∫ßn c·ªßa d·ªã ·ª©ng (ingredients)
                List<String> ingredients = allergy["ingredients"] != null
                    ? (allergy["ingredients"] as List)
                        .map((ingredient) =>
                            ingredient["ingredientName"].toString())
                        .toList()
                    : [];

                // Th√™m th√†nh ph·∫ßn v√†o danh s√°ch
                return "$allergyName: ${ingredients.join(", ")}";
              }).toList()
            : [];

        // L·∫•y danh s√°ch b·ªánh n·ªÅn (n·∫øu c√≥ ingredients)
        diseases = data["diseases"] != null
            ? (data["diseases"] as List).map((disease) {
                // L·∫•y t√™n b·ªánh
                String diseaseName = disease["diseaseName"].toString();

                // L·∫•y danh s√°ch th√†nh ph·∫ßn c·ªßa b·ªánh (n·∫øu c√≥)
                List<String> ingredients = disease["ingredients"] != null
                    ? (disease["ingredients"] as List)
                        .map((ingredient) =>
                            ingredient["ingredientName"].toString())
                        .toList()
                    : [];

                // Tr·∫£ v·ªÅ t√™n b·ªánh v√† c√°c th√†nh ph·∫ßn (n·∫øu c√≥)
                return "$diseaseName: ${ingredients.join(", ")}";
              }).toList()
            : [];

        notifyListeners();
      } else {
        print("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu s·ª©c kh·ªèe: ${healthData["errorMessage"]}");
      }
    } catch (e) {
      print("‚ùå L·ªói khi fetch d·ªØ li·ªáu s·ª©c kh·ªèe: $e");
    }
  }

  // Future<void> createAiSuggestion() async {
  //   final FlutterSecureStorage flutterSecureStorage = FlutterSecureStorage();
  //   final String? token = await flutterSecureStorage.read(key: 'accessToken');
  //
  //   if (token == null || token.isEmpty) {
  //     throw Exception("‚ö† Access token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
  //   }
  //
  //   try {
  //     final response = await _userService.createAiSuggestion(token);
  //
  //     if (response.statusCode == 200) {
  //       print("L·ªùi khuy√™n AI ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.");
  //       await fetchHealthProfile();
  //     } else {
  //       print('L·ªói khi t·∫°o l·ªùi khuy√™n AI: ${response.body}');
  //       throw Exception('L·ªói khi t·∫°o l·ªùi khuy√™n AI: ${response.statusCode}');
  //     }
  //   } catch (e) {
  //     print('Error creating AI suggestion: $e');
  //     throw Exception("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server.");
  //   }
  // }

  Future<bool> checkPremiumStatus() async {
    return await _userService.isPremium();
  }

  @override
  void dispose() {}
}
